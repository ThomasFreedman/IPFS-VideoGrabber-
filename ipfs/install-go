#!/bin/bash

# This script will install IPFS software and establish initial settings.
# This must be executed with root privileges or with sudo.

if [[ $(id -u) -ne 0 ]] ; then echo "Please run as root, or prefix with 'sudo'" ; exit 1 ; fi

# Calculate disk space available for IPFS
FREE=`df --output=avail -B 1 / | tail -n 1` # Free space in bytes on root partition
MAX=`expr $FREE / 1320000000`      # Approximately 75% of free space (in GB)
printf -v STORAGE_MAX %dG $MAX     # The default StorageMax parameter value

AUTO=0                             # Default autostart method 0 == systemd, 1 == cron @reboot
WAIT=0                             # Default value for single step / debug mode (no wait)
DISTUP=0                           # Default value for dist-upgrade (don't do it!)
RPI_UFW=0                          # Default value to install firewall on RPi (no)
GOVER=NoGo                         # Default Go language version (Don't use go version)
DEFGO=1.13.4                       # Default version to use (tho now -g requires version)

CONFIG=/home/ipfs/.ipfs/config     # IPFS configuration file

usage() {
  echo "$0 [-a] [-d] [-g <version> ] [-m <int> ] [-w] [-h | --help]"
  echo "-a == autostart method. Use cron @reboot instead of systemd unit"
  echo "-d == distribution upgrade. Specify -d to do a dist-upgrade"
  echo "-f == firewall on Raspberry Pi. Default is no. Use -f to enable on the RPi"
  echo "-g == go version. -g requires a version"
  echo "-m == max storage space. Default is 75% of disk. Option value integer in gigabytes"
  echo "-w == Wait after each step / debug mode. Default is no waiting"
  echo "-h == print this usage info and exit. Also for --help"
}

# Determine OpSys (Raspbian or Debian)
OS=`lsb_release -is`
if [[ $OS != "Raspbian" && $OS != "Debian" ]]; then
   echo "$OS Linux detected! This script is for Raspbian or Debian only for now."
   exit 1
fi
if [ $OS == "Raspbian" ]; then
  ARCH=armv6l;
else
  ARCH=amd64;                      # No support for 32 bit systems; should we?
fi

# Make sure we have enhanced getopt -- probably not required for most Linux distros
getopt --test
if [ $? -ne 4 ]; then echo "Ouch! getopt not available on this system - Bye!"; exit 1; fi

# Process command line options
# NOTE: double colons after g option (should be optional param for -g) swallows -m !!!
# getopt from util-linux 2.29.2 on Raspbian Stretch Lite OS, 4/8/2019 release
OPTS=`getopt -o adfg:m:wh --long help -n "$0" -- "$@"`
eval set -- "$OPTS"

# extract options and their arguments and set appropriate variables.
while true; do
    case "$1" in
        -a) AUTO=1;    shift ;;
        -d) DISTUP=1;  shift ;;
        -f) RPI_UFW=1; shift ;;
        -g) if [ "$2" != "" ]; then
              GOVER=$2
              echo "Will use golang version $GOVER"
            else
              GOVER=$DEFGO
            fi
            shift 2
            ;;
        -m) if ! [ -z "${2//[0-9]}" ]; then          # Positive number?
              echo "-m requires a positive integer (gigabytes)"
              exit 1
            fi
            STORAGE_MAX="$2G";
            shift 2
            ;;
        -h|--help) usage; exit 0 ;;
        -w) WAIT=1; shift ;;
        --) shift;  break ;;
        *) echo "No such option: $1" >&2; exit 1 ;;
    esac
done

# Show options parsed for this installation
echo "OS=$OS, ARCH=$ARCH, AUTO=$AUTO, DISTUP=$DISTUP, RPI_UFW=$RPI_UFW, GOVER=$GOVER, STORAGE_MAX=$STORAGE_MAX, WAIT=$WAIT"
echo ""
if [ $WAIT == 1 ]; then read -n 1 -p "Press ^C to exit, any other key to proceed..." key; fi

if [ ! -e "/usr/local/bin/go$GOVER.linux-$ARCH.tar.gz" ]; then
    pushd /usr/local/bin
    echo "Installing binary golang version $GOVER from googleapis. Please be patient..."
    wget https://storage.googleapis.com/golang/go$GOVER.linux-$ARCH.tar.gz
    tar -C /usr/local -xzf go$GOVER.linux-$ARCH.tar.gz
    popd
fi
